keys(hgu133a())
select(hgu133a, keys="BRCA1", columns = c("SYMBOL","UNIGENE"),
keytype="SYMBOL")
mget(hgu133a, keys="BRCA1", columns = c("SYMBOL","UNIGENE"), keytype="SYMBOL")
head( keys(hgu95av2.db, keytype="UNIGENE") )
head( keys(hgu133a(), keytype="UNIGENE") )
head( keys(hgu133a, keytype="UNIGENE") )
head( keys(hgu133a.db, keytype="UNIGENE") )
mget(hgu133a.db, keys="BRCA1", columns = c("SYMBOL","UNIGENE"), keytype="SYMBOL")
select(hgu133a.db, keys="BRCA1", columns = c("SYMBOL","UNIGENE"), keytype="SYMBOL")
keys(hgu133a.db)
columns(hgu133a.db)
select(hgu133a.db, keys="BRCA1", columns = c("SYMBOL","ACCNUM"), keytype="SYMBOL")
select(hgu133a.db, keys=keys(hgu133a.db), columns = c("SYMBOL","ACCNUM"), keytype="SYMBOL")
keytypes(hgu133a.db)
head( keys(hgu95av2.db) )
head( keys(hgu133a.db) )
select(hgu133a.db, keys=keys, columns = c("SYMBOL","UNIGENE"))
select(hgu133a.db, keys=keys(hgu133a.db), columns = c("SYMBOL","UNIGENE"))
affyIds <- select(hgu133a.db, keys=keys(hgu133a.db), columns = c("SYMBOL","UNIGENE"))
affyIds[,2]
affyIds[,2] %in% "BCRA1"
affyIds[affyIds[,2] %in% "BCRA1",]
affyIds[affyIds[,2] %in% "BRCA1",]
library(KEGG.db)
BiocManager::install(KEGG.db)
BiocManager::install("KEGG.db")
library(KEGG.db)
entrez
entrez[,1] %in% "BRCA1"
entrez[entrez[,1] %in% "BRCA1",2]
mget(entrez[entrez[,1] %in% "BRCA1",2], KEGGEXTID2PATHID, ifnotfound = list(NA))
mget(as.character(entrez[entrez[,1] %in% "BRCA1",2]),
KEGGEXTID2PATHID)
mget(as.character(entrez[entrez[,1] %in% "BRCA1",2]), KEGGEXTID2PATHID)
hsaPath <- mget(as.character(entrez[entrez[,1] %in% "BRCA1",2]), KEGGEXTID2PATHID)
KEGGPATHID2NAME[[unlist(hsaPath)]]
unlist(hsaPath)
KEGGPATHID2NAME[[unlist(hsaPath)]]
KEGGPATHID2NAME[unlist(hsaPath)]
KEGGPATHID2NAME$"hsa04120"
KEGGPATHID2NAME$hsa04120
KEGGPATHID2NAME$`hsa04120`
`
KEGGPATHID2NAME$"04120"
KEGGPATHID2NAME$"04120"
KEGGPATHID2NAME[unlist(hsaPath)]
mget(hsaPath,KEGGPATHID2NAME)
hsaPath
mget(unlist(hsaPath),KEGGPATHID2NAME)
hsaPath <- unlist(mget(x = as.character(entrez[entrez[,1] %in% "BRCA1",2]),
envir = KEGGEXTID2PATHID))
paste0(KEGGPATHID2NAME,"$",hsaPath)
hsaPath
KEGGPATHID2NAME,"$",hsaPath
paste0(KEGGPATHID2NAME,"$",hsaPath)
paste0("KEGGPATHID2NAME$",hsaPath)
parse(text = paste0("KEGGPATHID2NAME$",hsaPath))
expression(text = paste0("KEGGPATHID2NAME$",hsaPath))
expression(parse(text = paste0("KEGGPATHID2NAME$",hsaPath)))
expression(text = paste0("KEGGPATHID2NAME$",hsaPath))
parse(expression(text = paste0("KEGGPATHID2NAME$",hsaPath)))
paste0("KEGGPATHID2NAME$",hsaPath)
KEGGEXTID2PATHID
mget(hsaPath,KEGGEXTID2PATHID)
mget(hsaPath,KEGGPATHID2NAME)
hsaPath
unlist(mget(x = as.character(entrez[entrez[,1] %in% "BRCA1",2]),
envir = KEGGEXTID2PATHID))
KEGGPATHID2NAME$hsa04120
KEGGPATHID2NAME$"hsa04120"
KEGGPATHID2NAME$"hsa04120"
as.list(KEGGPATHID2NAME)
allPaths <- as.list(KEGGPATHID2NAME)
hsaPath <- unlist(mget(x = as.character(entrez[entrez[,1] %in% "BRCA1",2]),
envir = KEGGEXTID2PATHID))
allPaths <- as.list(KEGGPATHID2NAME)
allPaths[[hsaPath]]
names(allPaths)
hsaPath
allPaths[[gsub("hsa","",hsaPath)]]
KEGGPATHID2NAME[[gsub("hsa","",hsaPath)]]
KEGGPATHID2EXTID[[gsub("hsa","",hsaPath)]]
KEGGPATHID2EXTID
as.list(KEGGPATHID2EXTID)
KEGGPATHID2EXTID[[hsaPath]]
entrez[,2] %in% KEGGPATHID2EXTID[[hsaPath]]
entrez[entrez[,2] %in% KEGGPATHID2EXTID[[hsaPath]],1]
library(topGO)
BiocManager::install("topGO")
## Get the gene annotations for all of the probes on the arrays used in this study. We
## install the 'affyLib' package; this is required for 'topGO'. The use of 'paste' is
## just a fancy way to automatically specify the annotation database to use for relating
## Affymetrix probeset ID's to gene names.
affyLib <- paste(annotation(ALL), "db", sep=".")
## Load example dataset. These data consist of gene expression microarrays (which we'll
## learn about in more detail later) for 128 individuals with acute lymphoblastic
## leukemia (ALL). There are 12,625 genes represented on each array, which means that we
## have 128 quantitative numbers for each of the 12,625 genes. The 'geneList' object
## contains a small number of genes (323) that were selected as interesting (using
## differential expression analysis, which we'll learn about in more detail later). The
## names of each element identify probesets on the Affymetrix arrays that were used. The
## numeric values in each element are p-values for testing differential expression.
library(ALL)
affyIds
affyIds <- select(hgu133a.db, keys=keys(hgu133a.db),
columns = c("SYMBOL"))
data(ALL)
BiocManager::install("ALL")
data(geneList)
## Get the gene annotations for all of the probes on the arrays used in this study. We
## install the 'affyLib' package; this is required for 'topGO'. The use of 'paste' is
## just a fancy way to automatically specify the annotation database to use for relating
## Affymetrix probeset ID's to gene names.
affyLib <- paste(annotation(ALL), "db", sep=".")
## Load example dataset. These data consist of gene expression microarrays (which we'll
## learn about in more detail later) for 128 individuals with acute lymphoblastic
## leukemia (ALL). There are 12,625 genes represented on each array, which means that we
## have 128 quantitative numbers for each of the 12,625 genes. The 'geneList' object
## contains a small number of genes (323) that were selected as interesting (using
## differential expression analysis, which we'll learn about in more detail later). The
## names of each element identify probesets on the Affymetrix arrays that were used. The
## numeric values in each element are p-values for testing differential expression.
library(ALL)
data(ALL)
data(geneList)
## Get the gene annotations for all of the probes on the arrays used in this study. We
## install the 'affyLib' package; this is required for 'topGO'. The use of 'paste' is
## just a fancy way to automatically specify the annotation database to use for relating
## Affymetrix probeset ID's to gene names.
affyLib <- paste(annotation(ALL), "db", sep=".")
biocLite(affyLib)
library(affyLib, character.only = TRUE)
data(geneList)
KEGGPATHID2NAME[[gsub("hsa","",hsaPath)]]
KEGGPATHID2EXTID[[hsaPath]]
columns(affyIds)
columns(hgu133a.db)
affyIds <- select(hgu133a.db, keys=keys(hgu133a.db),
columns = c("SYMBOL", "ENTREZID"))
affyIds[affyIds[,2] %in% "BRCA1",]
allGenes <- affyIds[,3]
allGenes <- unique(affyIds[,3])
allGenes
KEGGPATHID2NAME[[gsub("hsa","",hsaPath)]]
pathGenes
brca1path <- KEGGPATHID2EXTID[[hsaPath]]
GO_data <- new("topGOdata", ontology = "BP", allGenes = allGenes,
geneSel = brca1path, nodeSize = 10, annot = annFUN.db, affyLib = affyLib)
library(topGO)
GO_data <- new("topGOdata", ontology = "BP", allGenes = allGenes,
geneSel = brca1path, nodeSize = 10, annot = annFUN.db, affyLib = affyLib)
names(brca1path)
names(brca1path) <- brca1path
GO_data <- new("topGOdata", ontology = "BP", allGenes = allGenes,
geneSel = brca1path, nodeSize = 10, annot = annFUN.db, affyLib = affyLib)
names(allGenes) <- allGenes
brca1path <- KEGGPATHID2EXTID[[hsaPath]]
GO_data <- new("topGOdata", ontology = "BP", allGenes = allGenes,
geneSel = brca1path, nodeSize = 10, annot = annFUN.db, affyLib = affyLib)
seq_len(allGenes)
allGenes <- seq_len(unique(affyIds[,3]))
allGenes <- seq_along(unique(affyIds[,3]))
names(allGenes) <- unique(affyIds[,3])
brca1path <- KEGGPATHID2EXTID[[hsaPath]]
GO_data <- new("topGOdata", ontology = "BP", allGenes = allGenes,
geneSel = brca1path, nodeSize = 10, annot = annFUN.db, affyLib = affyLib)
allGenes
affy_entrez = hgu133aENTREZID
##all probes for the universal set
mapped_probes_all = mappedkeys(affy_entrez)
##create a numeric vector where ubiq_pwy probes are 1 and all others are 0
allGenes=as.numeric(mapped_probes_all %in% ubiq_probset)
Ubiq_EIDs=KEGGPATHID2EXTID$hsa04120
Ubiq_symbols=mget(Ubiq_EIDs, org.Hs.egSYMBOL, ifnotfound = NA)
Ubiq_symbols=unlist(Ubiq_symbols)
Ubiq_symbols=Ubiq_symbols[!is.na(Ubiq_symbols)]
Ubiq_symbols=unique(Ubiq_symbols) #Unique doesn't do stuff here. I am just using this to get clearer output without entrez ID
#(e)
library(topGO)
##create a numeric vector where ubiq_pwy probes are 1 and all others are 0
allGenes=as.numeric(mapped_probes_all %in% ubiq_probset)
names(allGenes)=mapped_probes_all
##function to select only ubiq_pwy probes
geneSel=function(input){
return(input==1)
}
GO_data <- new("topGOdata", ontology = "BP", allGenes = allGenes,
geneSel = geneSel, nodeSize = 10, annot = annFUN.db, affyLib = "hgu133a.db")
GO_data <- new("topGOdata", ontology = "BP", allGenes = allGenes,
geneSel = brca1path, nodeSize = 10, annot = annFUN.db, affyLib = hgu133a.db)
geneSel
allGenes
GO_data <- new("topGOdata", ontology = "BP", allGenes = allGenes,
geneSel = as.numeric(allGenes %in% brca1path), nodeSize = 10, annot = annFUN.db, affyLib = hgu133a.db)
GO_data <- new("topGOdata", ontology = "BP", allGenes = allGenes,
geneSel = (allGenes %in% brca1path), nodeSize = 10, annot = annFUN.db, affyLib = hgu133a.db)
topDiffGenes(geneList)
brca1path
?topGO
?runTest()
=?runTest()
?runTest
data("GOdata")
GOdata
?GOdata
data(geneList)
geneList
sum(topDiffGenes(geneList))
geneList
topDiffGenes()
topDiffGenes
GO_data <- new("topGOdata", ontology = "BP", allGenes = allGenes,
geneSel = function(X){return(TRUE)}, nodeSize = 10, annot = annFUN.db, affyLib = hgu133a.db)
geneSel <- function(X){return(TRUE)}
geneSel()
geneSel()
geneSel()
geneSel <- function(X){X %in% brca1path}
geneSel("1")
GO_data <- new("topGOdata", ontology = "BP", allGenes = allGenes,
geneSel = geneSel, nodeSize = 10, annot = annFUN.db, affyLib = hgu133a.db)
geneList
allGenes
GO_data <- new("topGOdata", ontology = "BP", allGenes = allGenes)#,
GO_data <- new("topGOdata", ontology = "BP", allGenes = allGenes,
geneSel = geneSel, annot = annFUN.db, affyLib = hgu133a.db)
geneSel <- function(X){X %in% KEGGPATHID2EXTID[[hsaPath]]}
GO_data <- new(Class = "topGOdata",
ontology = "BP",
allGenes = allGenes,
geneSel = geneSel,
annot = annFUN.db,
affyLib = hgu133a.db)
allGenes
geneSel <- function(X){names(X) %in% KEGGPATHID2EXTID[[hsaPath]]}
GO_data <- new(Class = "topGOdata",
ontology = "BP",
allGenes = allGenes,
geneSel = geneSel,
annot = annFUN.db,
affyLib = hgu133a.db)
allGenes
geneList
which(allGenes %in% KEGGPATHID2EXTID[[hsaPath]])
geneSel <- function(X){X %in% which(allGenes %in% KEGGPATHID2EXTID[[hsaPath]])}
GO_data <- new(Class = "topGOdata",
ontology = "BP",
allGenes = allGenes,
geneSel = geneSel,
annot = annFUN.db,
affyLib = hgu133a.db)
geneSel(8450)
geneSel("8450")
GO_data <- new(Class = "topGOdata",
ontology = "BP",
allGenes = allGenes,
geneSel = geneSel,
annot = annFUN.db,
affyLib = hgu133a.db)
allGenes <- as.character(seq_along(unique(affyIds[,3])))
names(allGenes) <- unique(affyIds[,3])
geneSel <- function(X){X %in% which(allGenes %in% KEGGPATHID2EXTID[[hsaPath]])}
GO_data <- new(Class = "topGOdata",
ontology = "BP",
allGenes = allGenes,
geneSel = geneSel,
annot = annFUN.db,
affyLib = hgu133a.db)
allGenes <- seq_along(unique(affyIds[,3]))
names(allGenes) <- unique(affyIds[,3])
geneSel <- function(X){X %in% which(allGenes %in% KEGGPATHID2EXTID[[hsaPath]])}
#X %in% which(allGenes %in% KEGGPATHID2EXTID[[hsaPath]]
geneSel <- function(X){TRUE}
GO_data <- new(Class = "topGOdata",
ontology = "BP",
allGenes = allGenes,
geneSel = geneSel,
annot = annFUN.db,
affyLib = hgu133a.db)
#X %in% which(allGenes %in% KEGGPATHID2EXTID[[hsaPath]]
genSel <- function(X){TRUE}
GO_data <- new(Class = "topGOdata",
ontology = "BP",
allGenes = allGenes,
geneSel = genSel,
annot = annFUN.db,
affyLib = hgu133a.db)
library(KEGG.db)
hsaPath <- unlist(mget(x = as.character(entrez[entrez[,1] %in% "BRCA1",2]),
envir = KEGGEXTID2PATHID))
allGenes <- seq_along(unique(affyIds[,3]))
library(topGO)
library("hgu133a.db")
allGenes <- seq_along(unique(affyIds[,3]))
affyIds <- select(hgu133a.db, keys=keys(hgu133a.db),
columns = c("SYMBOL", "ENTREZID"))
affyIds[affyIds[,2] %in% "BRCA1",]
allGenes <- seq_along(unique(affyIds[,3]))
names(allGenes) <- unique(affyIds[,3])
#X %in% which(allGenes %in% KEGGPATHID2EXTID[[hsaPath]]
genSel <- function(X){TRUE}
GO_data <- new(Class = "topGOdata",
ontology = "BP",
allGenes = allGenes,
geneSel = genSel,
annot = annFUN.db,
affyLib = hgu133a.db)
allGenes
allGenes <- rep(0,unique(affyIds[,3]))
allGenes <- rep(0,length(unique(affyIds[,3])))
names(allGenes) <- unique(affyIds[,3])
#X %in% which(allGenes %in% KEGGPATHID2EXTID[[hsaPath]]
genSel <- function(X){X == 1}
names(allGenes) %in% KEGGPATHID2EXTID[[hsaPath]]
hsaPath <- unlist(mget(x = as.character(entrez[entrez[,1] %in% "BRCA1",2]),
envir = KEGGEXTID2PATHID))
entrez <- getBM(attributes = c("hgnc_symbol", "entrezgene"),
mart = mart)
library(biomaRt)
entrez <- getBM(attributes = c("hgnc_symbol", "entrezgene"),
mart = mart)
mart <- useMart(biomart = "ensembl",
dataset = "hsapiens_gene_ensembl")
entrez <- getBM(attributes = c("hgnc_symbol", "entrezgene"),
mart = mart)
allGenes[names(allGenes) %in% KEGGPATHID2EXTID[[hsaPath]]] <- 1
library(biomaRt)
mart <- useMart(biomart = "ensembl",
dataset = "hsapiens_gene_ensembl")
peptideS <- getSequence(id="SPRR4",
type="hgnc_symbol",
seqType="peptide",
mart = mart)[,1]
peptideS
cdnaS <- getSequence(id="SPRR4",
type="hgnc_symbol",
seqType="cdna",
mart = mart)[,1]
cdnaS
entrez <- getBM(attributes = c("hgnc_symbol", "entrezgene"),
mart = mart)
entrezSPRR4 <- entrez[entrez[,1] %in% "SPRR4",2]
entrezSPRR4
library(org.Hs.eg.db)
library(GO.db)
GO <- mget(x = as.character(entrezSPRR4),
envir = org.Hs.egGO)[[1]]
GO <- data.frame(GO=unlist(lapply(GO, function(X){c(X[1])})),
ONTOLOGY =unlist(lapply(GO, function(X){c(X[3])})))
as.vector(Definition(as.vector(GO[GO[,2] == "BP",1])))
as.vector(Term(as.vector(GO[GO[,2] == "CC",1])))
library("hgu133a.db")
affyIds <- select(hgu133a.db, keys=keys(hgu133a.db),
columns = c("SYMBOL", "ENTREZID"))
affyIds[affyIds[,2] %in% "BRCA1",]
library(KEGG.db)
hsaPath <- unlist(mget(x = as.character(entrez[entrez[,1] %in% "BRCA1",2]),
envir = KEGGEXTID2PATHID))
KEGGPATHID2NAME[[gsub("hsa","",hsaPath)]]
pathGenes <- entrez[entrez[,2] %in% KEGGPATHID2EXTID[[hsaPath]],1]
pathGenes
pathGenes <- entrez[entrez[,2] %in% KEGGPATHID2EXTID[[hsaPath]],1]
pathGenes
library(topGO)
allGenes <- rep(0,length(unique(affyIds[,3])))
names(allGenes) <- unique(affyIds[,3])
allGenes[names(allGenes) %in% KEGGPATHID2EXTID[[hsaPath]]] <- 1
genSel <- function(X){X == 1}
GO_data <- new(Class = "topGOdata",
ontology = "BP",
allGenes = allGenes,
geneSel = genSel,
annot = annFUN.db,
affyLib = hgu133a.db)
allGenes
sum(allGenes)
genSel <- function(X){X == 1}
genSel(allGenes)
sum(genSel(allGenes))
data(geneList)
geneList
hgu133a.db
library("hgu133a.db")
affy_entrez = hgu133aENTREZID
##all probes for the universal set
mapped_probes_all = mappedkeys(affy_entrez)
##create a numeric vector where ubiq_pwy probes are 1 and all others are 0
allGenes=as.numeric(mapped_probes_all %in% ubiq_probset)
hgu133a.db
mapped_probes_all
affyIds
allGenes <- rep(0,length(unique(affyIds[,1])))
names(allGenes) <- unique(affyIds[,3])
affyIds[,1]
affyIds[,2]
affyIds[,2] %in% pathGenes
allGenes[affyIds[,2] %in% pathGenes] <- 1
genSel <- function(X){X == 1}
GO_data <- new(Class = "topGOdata",
ontology = "BP",
allGenes = allGenes,
geneSel = genSel,
annot = annFUN.db,
affyLib = hgu133a.db)
allGenes
names(allGenes) <- unique(affyIds[,1])
allGenes[affyIds[,2] %in% pathGenes] <- 1
genSel <- function(X){X == 1}
GO_data <- new(Class = "topGOdata",
ontology = "BP",
allGenes = allGenes,
geneSel = genSel,
annot = annFUN.db,
affyLib = hgu133a.db)
allGenes
genSel <- function(X){return(X == 1)}
GO_data <- new(Class = "topGOdata",
ontology = "BP",
allGenes = allGenes,
geneSel = genSel,
annot = annFUN.db,
affyLib = hgu133a.db)
names(allGenes)=mapped_probes_all
##function to select only ubiq_pwy probes
geneSel=function(input){
return(input==1)
}
GO_data <- new("topGOdata", ontology = "BP", allGenes = allGenes,
geneSel = geneSel, nodeSize = 10, annot = annFUN.db, affyLib = "hgu133a.db")
GO_data <- new(Class = "topGOdata",
ontology = "BP",
allGenes = allGenes,
geneSel = genSel,
annot = annFUN.db,
affyLib = "hgu133a.db")
GO_data <- new(Class = "topGOdata",
ontology = "BP",
allGenes = allGenes,
geneSel = genSel,
nodeSize = 10,
annot = annFUN.db,
affyLib = "hgu133a.db")
enrichment <- runTest(GO_data, algorithm = "classic", statistic = "fisher")
enrichment
enrichment@score
score(enrichment) < 0.01
sum(score(enrichment) < 0.01)
min(scores(enrichment))
min(score(enrichment))
which.min(score(enrichment))
names(which.min(score(enrichment)))
library(GO.db)
goTerm <- names(which.min(score(enrichment)))
Definition(goTerm)
Term(goTerm)
affyIds[,2] %in% pathGenes
table(affyIds[,2] %in% pathGenes)
allGenes[affyIds[,2] %in% pathGenes] <- 1
sum(allGenes)
allGenes <- rep(0,length(unique(affyIds[,1])))
names(allGenes) <- unique(affyIds[,1])
allGenes[affyIds[,2] %in% pathGenes] <- 1
sum(allGenes)
allGenes
allGenes == 1
sum(allGenes == 1)
allGenes <- rep(0,length(unique(affyIds[,1])))
allGenes
allGenes[affyIds[,2] %in% pathGenes] <- 1
sum(allGenes)
sum(allGenes, na.rm = TRUE)
allGenes <- rep(0,length(unique(affyIds[,1])))
names(allGenes) <- unique(affyIds[,1])
allGenes[affyIds[,2] %in% pathGenes] <- 1
genSel <- function(X){return(X == 1)}
GO_data <- new(Class = "topGOdata",
ontology = "BP",
allGenes = allGenes,
geneSel = genSel,
nodeSize = 10,
annot = annFUN.db,
affyLib = "hgu133a.db")
enrichment <- runTest(GO_data, algorithm = "classic", statistic = "fisher")
sum(score(enrichment) < 0.01)
goTerm <- names(which.min(score(enrichment)))
Definition(goTerm)
Term(goTerm)
allGenes <- rep(0,length(unique(affyIds[,1])))
allGenes <- rep(0,length(affyIds[,1]))
names(allGenes) <- affyIds[,1]
allGenes
pathGenes
affyIds[,2] %in% pathGenes
table(affyIds[,2] %in% pathGenes)
allGenes[affyIds[,2] %in% pathGenes] <- 1
allGenes
sum(allGenes)
genSel <- function(X){return(X == 1)}
GO_data <- new(Class = "topGOdata",
ontology = "BP",
allGenes = allGenes,
geneSel = genSel,
nodeSize = 10,
annot = annFUN.db,
affyLib = "hgu133a.db")
enrichment <- runTest(GO_data, algorithm = "classic", statistic = "fisher")
sum(score(enrichment) < 0.01)
goTerm <- names(which.min(score(enrichment)))
Definition(goTerm)
Term(goTerm)
Ontology(goTerm)
